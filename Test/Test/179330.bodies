class CI_DB_odbc_driver
!!!596482.php!!!	__construct(in params : array) : void
		parent::__construct($params);

		// Legacy support for DSN in the hostname field
		if (empty($this->dsn))
		{
			$this->dsn = $this->hostname;
		}
!!!596610.php!!!	db_connect(in persistent : bool = FALSE) : resource
		return ($persistent === TRUE)
			? odbc_pconnect($this->dsn, $this->username, $this->password)
			: odbc_connect($this->dsn, $this->username, $this->password);
!!!596738.php!!!	compile_binds(in sql : string, in binds : array) : string
		if (empty($binds) OR empty($this->bind_marker) OR strpos($sql, $this->bind_marker) === FALSE)
		{
			return $sql;
		}
		elseif ( ! is_array($binds))
		{
			$binds = array($binds);
			$bind_count = 1;
		}
		else
		{
			// Make sure we're using numeric keys
			$binds = array_values($binds);
			$bind_count = count($binds);
		}

		// We'll need the marker length later
		$ml = strlen($this->bind_marker);

		// Make sure not to replace a chunk inside a string that happens to match the bind marker
		if ($c = preg_match_all("/'[^']*'|\"[^\"]*\"/i", $sql, $matches))
		{
			$c = preg_match_all('/'.preg_quote($this->bind_marker, '/').'/i',
				str_replace($matches[0],
					str_replace($this->bind_marker, str_repeat(' ', $ml), $matches[0]),
					$sql, $c),
				$matches, PREG_OFFSET_CAPTURE);

			// Bind values' count must match the count of markers in the query
			if ($bind_count !== $c)
			{
				return $sql;
			}
		}
		elseif (($c = preg_match_all('/'.preg_quote($this->bind_marker, '/').'/i', $sql, $matches, PREG_OFFSET_CAPTURE)) !== $bind_count)
		{
			return $sql;
		}

		if ($this->bind_marker !== '?')
		{
			do
			{
				$c--;
				$sql = substr_replace($sql, '?', $matches[0][$c][1], $ml);
			}
			while ($c !== 0);
		}

		if (FALSE !== ($this->odbc_result = odbc_prepare($this->conn_id, $sql)))
		{
			$this->binds = array_values($binds);
		}

		return $sql;
!!!596866.php!!!	_execute(in sql : string) : resource
		if ( ! isset($this->odbc_result))
		{
			return odbc_exec($this->conn_id, $sql);
		}
		elseif ($this->odbc_result === FALSE)
		{
			return FALSE;
		}

		if (TRUE === ($success = odbc_execute($this->odbc_result, $this->binds)))
		{
			// For queries that return result sets, return the result_id resource on success
			$this->is_write_type($sql) OR $success = $this->odbc_result;
		}

		$this->odbc_result = NULL;
		$this->binds       = array();

		return $success;
!!!596994.php!!!	_trans_begin() : bool
		return odbc_autocommit($this->conn_id, FALSE);
!!!597122.php!!!	_trans_commit() : bool
		if (odbc_commit($this->conn_id))
		{
			odbc_autocommit($this->conn_id, TRUE);
			return TRUE;
		}

		return FALSE;
!!!597250.php!!!	_trans_rollback() : bool
		if (odbc_rollback($this->conn_id))
		{
			odbc_autocommit($this->conn_id, TRUE);
			return TRUE;
		}

		return FALSE;
!!!597378.php!!!	is_write_type(in sql : string) : bool
		if (preg_match('#^(INSERT|UPDATE).*RETURNING\s.+(\,\s?.+)*$#is', $sql))
		{
			return FALSE;
		}

		return parent::is_write_type($sql);
!!!597506.php!!!	_escape_str(in str : string) : string
		$this->display_error('db_unsupported_feature');
!!!597634.php!!!	affected_rows() : int
		return odbc_num_rows($this->result_id);
!!!597762.php!!!	insert_id() : bool
		return ($this->db_debug) ? $this->display_error('db_unsupported_feature') : FALSE;
!!!597890.php!!!	_list_tables(in prefix_limit : bool = FALSE) : string
		$sql = "SELECT table_name FROM information_schema.tables WHERE table_schema = '".$this->schema."'";

		if ($prefix_limit !== FALSE && $this->dbprefix !== '')
		{
			return $sql." AND table_name LIKE '".$this->escape_like_str($this->dbprefix)."%' "
				.sprintf($this->_like_escape_str, $this->_like_escape_chr);
		}

		return $sql;
!!!598018.php!!!	_list_columns(in table : string = '') : string
		return 'SHOW COLUMNS FROM '.$table;
!!!598146.php!!!	_field_data(in table : string) : string
		return 'SELECT TOP 1 FROM '.$table;
!!!598274.php!!!	error() : array
		return array('code' => odbc_error($this->conn_id), 'message' => odbc_errormsg($this->conn_id));
!!!598402.php!!!	_close() : void
		odbc_close($this->conn_id);
