format 221
"database" // application::Test::01Programmation::WIM::WIM2.1::gcontacts::system::database
  revision 1
  modified_by 2 "lechartier"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  php_dir "01Programmation/WIM/WIM2.1/gcontacts/system/database/"
  classview 138498 "database"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 158082 "CI_DB_forge"
      abstract visibility package 
      cpp_decl ""
      java_decl ""
      php_decl "${comment}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
Database Forge Class

@category	Database
@author		EllisLab Dev Team
@link		https://codeigniter.com/user_guide/database/
"
      attribute 337538 "db"
	protected explicit_type "object"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Database object

@var	${type}
"
      end

      attribute 337666 "fields"
	public explicit_type "array"
	init_value " array()"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Fields data

@var	${type}
"
      end

      attribute 337794 "keys"
	public explicit_type "array"
	init_value " array()"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Keys data

@var	${type}
"
      end

      attribute 337922 "primary_keys"
	public explicit_type "array"
	init_value " array()"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Primary Keys data

@var	${type}
"
      end

      attribute 338050 "db_char_set"
	public explicit_type "string"
	init_value " ''"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Database character set

@var	${type}
"
      end

      attribute 338178 "_create_database"
	protected explicit_type "string"
	init_value " 'CREATE DATABASE %s'"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " --------------------------------------------------------------------

CREATE DATABASE statement

@var	${type}
"
      end

      attribute 338306 "_drop_database"
	protected explicit_type "string"
	init_value " 'DROP DATABASE %s'"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
DROP DATABASE statement

@var	${type}
"
      end

      attribute 338434 "_create_table"
	protected explicit_type "string"
	init_value " \"%s %s (%s\\n)\""
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
CREATE TABLE statement

@var	${type}
"
      end

      attribute 338562 "_create_table_if"
	protected explicit_type "string"
	init_value " 'CREATE TABLE IF NOT EXISTS'"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
CREATE TABLE IF statement

@var	${type}
"
      end

      attribute 338690 "_create_table_keys"
	protected explicit_type "bool"
	init_value " FALSE"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
CREATE TABLE keys flag

Whether table keys are created from within the
CREATE TABLE statement.

@var	${type}
"
      end

      attribute 338818 "_drop_table_if"
	protected explicit_type "string"
	init_value " 'DROP TABLE IF EXISTS'"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
DROP TABLE IF EXISTS statement

@var	${type}
"
      end

      attribute 338946 "_rename_table"
	protected explicit_type "string"
	init_value " 'ALTER TABLE %s RENAME TO %s;'"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
RENAME TABLE statement

@var	${type}
"
      end

      attribute 339074 "_unsigned"
	protected explicit_type "bool|array"
	init_value " TRUE"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
UNSIGNED support

@var	${type}
"
      end

      attribute 339202 "_null"
	protected explicit_type "string"
	init_value " ''"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
NULL value representation in CREATE/ALTER TABLE statements

@var	${type}
"
      end

      attribute 339330 "_default"
	protected explicit_type "string"
	init_value " ' DEFAULT '"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
DEFAULT value representation in CREATE/ALTER TABLE statements

@var	${type}
"
      end

      operation 554242 "__construct"
	public explicit_return_type "void"
	nparams 1
	  param inout name "db" explicit_type "object"
	
	
	preserve_php_body_indent php_def "  ${comment}${visibility}function ${name}${(}& ${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Class constructor

@param	${t0}	&$db	Database object
@return	${type}
"
      end

      operation 554370 "create_database"
	public explicit_return_type "bool"
	nparams 1
	  param in name "db_name" explicit_type "string"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Create database

@param	${t0}	${p0}
@return	${type}
"
      end

      operation 554498 "drop_database"
	public explicit_return_type "bool"
	nparams 1
	  param in name "db_name" explicit_type "string"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Drop database

@param	${t0}	${p0}
@return	${type}
"
      end

      operation 554626 "add_key"
	public explicit_return_type "CI_DB_forge"
	nparams 2
	  param in name "key" explicit_type "string"
	  param in name "primary" explicit_type "bool"
	    defaultvalue "FALSE"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Add Key

@param	${t0}	${p0}
@param	${t1}	${p1}
@return	${type}
"
      end

      operation 554754 "add_field"
	public explicit_return_type "CI_DB_forge"
	nparams 1
	  param in name "field" explicit_type "array"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Add Field

@param	${t0}	${p0}
@return	${type}
"
      end

      operation 554882 "create_table"
	public explicit_return_type "bool"
	nparams 3
	  param in name "table" explicit_type "string"
	  param in name "if_not_exists" explicit_type "bool"
	    defaultvalue "FALSE"
	  param in name "attributes" explicit_type "array"
	    defaultvalue "array()"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, array ${p2}${v2}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Create Table

@param	${t0}	${p0}		Table name
@param	${t1}	${p1}	Whether to add IF NOT EXISTS condition
@param	${t2}	${p2}	Associative array of table attributes
@return	${type}
"
      end

      operation 555010 "_create_table"
	protected explicit_return_type "mixed"
	nparams 3
	  param in name "table" explicit_type "string"
	  param in name "if_not_exists" explicit_type "bool"
	  param in name "attributes" explicit_type "array"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Create Table

@param	${t0}	${p0}		Table name
@param	${t1}	${p1}	Whether to add 'IF NOT EXISTS' condition
@param	${t2}	${p2}	Associative array of table attributes
@return	${type}
"
      end

      operation 555138 "_create_table_attr"
	protected explicit_return_type "string"
	nparams 1
	  param in name "attributes" explicit_type "array"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

CREATE TABLE attributes

@param	${t0}	${p0}	Associative array of table attributes
@return	${type}
"
      end

      operation 555266 "drop_table"
	public explicit_return_type "bool"
	nparams 2
	  param in name "table_name" explicit_type "string"
	  param in name "if_exists" explicit_type "bool"
	    defaultvalue "FALSE"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Drop Table

@param	${t0}	${p0}	Table name
@param	${t1}	${p1}	Whether to add an IF EXISTS condition
@return	${type}
"
      end

      operation 555394 "_drop_table"
	protected explicit_return_type "string"
	nparams 2
	  param in name "table" explicit_type "string"
	  param in name "if_exists" explicit_type "bool"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Drop Table

Generates a platform-specific DROP TABLE string

@param	${t0}	${p0}		Table name
@param	${t1}	${p1}	Whether to add an IF EXISTS condition
@return	${type}
"
      end

      operation 555522 "rename_table"
	public explicit_return_type "bool"
	nparams 2
	  param in name "table_name" explicit_type "string"
	  param in name "new_table_name" explicit_type "string"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Rename Table

@param	${t0}	${p0}	Old table name
@param	${t1}	${p1}	New table name
@return	${type}
"
      end

      operation 555650 "add_column"
	public explicit_return_type "bool"
	nparams 3
	  param in name "table" explicit_type "string"
	  param in name "field" explicit_type "array"
	  param in name "_after" explicit_type "string"
	    defaultvalue "NULL"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Column Add

@todo	Remove deprecated $_after option in 3.1+
@param	${t0}	${p0}	Table name
@param	${t1}	${p1}	Column definition
@param	${t2}	${p2}	Column for AFTER clause (deprecated)
@return	${type}
"
      end

      operation 555778 "drop_column"
	public explicit_return_type "bool"
	nparams 2
	  param in name "table" explicit_type "string"
	  param in name "column_name" explicit_type "string"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Column Drop

@param	${t0}	${p0}		Table name
@param	${t1}	${p1}	Column name
@return	${type}
"
      end

      operation 555906 "modify_column"
	public explicit_return_type "bool"
	nparams 2
	  param in name "table" explicit_type "string"
	  param in name "field" explicit_type "string"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Column Modify

@param	${t0}	${p0}	Table name
@param	${t1}	${p1}	Column definition
@return	${type}
"
      end

      operation 556034 "_alter_table"
	protected explicit_return_type "string|string[]"
	nparams 3
	  param in name "alter_type" explicit_type "string"
	  param in name "table" explicit_type "string"
	  param in name "field" explicit_type "mixed"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

ALTER TABLE

@param	${t0}	${p0}	ALTER type
@param	${t1}	${p1}		Table name
@param	${t2}	${p2}		Column definition
@return	${type}
"
      end

      operation 556162 "_process_fields"
	protected explicit_return_type "array"
	nparams 1
	  param in name "create_table" explicit_type "bool"
	    defaultvalue "FALSE"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Process fields

@param	${t0}	${p0}
@return	${type}
"
      end

      operation 556290 "_process_column"
	protected explicit_return_type "string"
	nparams 1
	  param in name "field" explicit_type "array"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Process column

@param	${t0}	${p0}
@return	${type}
"
      end

      operation 556418 "_attr_type"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "attributes" explicit_type "array"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}& ${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Field attribute TYPE

Performs a data type mapping between different databases.

@param	${t0}	&$attributes
@return	${type}
"
      end

      operation 556546 "_attr_unsigned"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "attributes" explicit_type "array"
	  param inout name "field" explicit_type "array"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}& ${p0}${v0}, & ${p1}${v1}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Field attribute UNSIGNED

Depending on the _unsigned property value:

	- TRUE will always set $field['unsigned'] to 'UNSIGNED'
	- FALSE will always set $field['unsigned'] to ''
	- array(TYPE) will set $field['unsigned'] to 'UNSIGNED',
		if $attributes['TYPE'] is found in the array
	- array(TYPE => UTYPE) will change $field['type'],
		from TYPE to UTYPE in case of a match

@param	${t0}	&$attributes
@param	${t1}	&$field
@return	${type}
"
      end

      operation 556674 "_attr_default"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "attributes" explicit_type "array"
	  param inout name "field" explicit_type "array"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}& ${p0}${v0}, & ${p1}${v1}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Field attribute DEFAULT

@param	${t0}	&$attributes
@param	${t1}	&$field
@return	${type}
"
      end

      operation 556802 "_attr_unique"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "attributes" explicit_type "array"
	  param inout name "field" explicit_type "array"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}& ${p0}${v0}, & ${p1}${v1}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Field attribute UNIQUE

@param	${t0}	&$attributes
@param	${t1}	&$field
@return	${type}
"
      end

      operation 556930 "_attr_auto_increment"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "attributes" explicit_type "array"
	  param inout name "field" explicit_type "array"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}& ${p0}${v0}, & ${p1}${v1}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Field attribute AUTO_INCREMENT

@param	${t0}	&$attributes
@param	${t1}	&$field
@return	${type}
"
      end

      operation 557058 "_process_primary_keys"
	protected explicit_return_type "string"
	nparams 1
	  param in name "table" explicit_type "string"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Process primary keys

@param	${t0}	${p0}	Table name
@return	${type}
"
      end

      operation 557186 "_process_indexes"
	protected explicit_return_type "string"
	nparams 1
	  param in name "table" explicit_type "string"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Process indexes

@param	${t0}	${p0}
@return	${type}
"
      end

      operation 557314 "_reset"
	protected explicit_return_type "void"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Reset

Resets table creation vars

@return	${type}
"
      end
    end

    class 158338 "CI_DB_result"
      visibility package 
      cpp_decl ""
      java_decl ""
      php_decl "${comment}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
Database Result Class

This is the platform-independent result class.
This class will not be called directly. Rather, the adapter
class for the specific database will extend and instantiate it.

@category	Database
@author		EllisLab Dev Team
@link		https://codeigniter.com/user_guide/database/
"
      attribute 343426 "conn_id"
	public explicit_type "resource|object"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Connection ID

@var	${type}
"
      end

      attribute 343554 "result_id"
	public explicit_type "resource|object"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Result ID

@var	${type}
"
      end

      attribute 343682 "result_array"
	public explicit_type "array[]"
	init_value " array()"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Result Array

@var	${type}
"
      end

      attribute 343810 "result_object"
	public explicit_type "object[]"
	init_value " array()"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Result Object

@var	${type}
"
      end

      attribute 343938 "custom_result_object"
	public explicit_type "object[]"
	init_value " array()"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Custom Result Object

@var	${type}
"
      end

      attribute 344066 "current_row"
	public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Current Row index

@var	${type}
"
      end

      attribute 344194 "num_rows"
	public explicit_type "int"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Number of rows

@var	${type}
"
      end

      attribute 344322 "row_data"
	public explicit_type "array"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Row data

@var	${type}
"
      end

      operation 567682 "__construct"
	public explicit_return_type "void"
	nparams 1
	  param inout name "driver_object" explicit_type "object"
	
	
	preserve_php_body_indent php_def "  ${comment}${visibility}function ${name}${(}& ${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Constructor

@param	${t0}	${p0}
@return	${type}
"
      end

      operation 567810 "num_rows"
	public explicit_return_type "int"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Number of rows in the result set

@return	${type}
"
      end

      operation 567938 "result"
	public explicit_return_type "array"
	nparams 1
	  param in name "type" explicit_type "string"
	    defaultvalue "'object'"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Query result. Acts as a wrapper function for the following functions.

@param	${t0}	${p0}	'object', 'array' or a custom class name
@return	${type}
"
      end

      operation 568066 "custom_result_object"
	public explicit_return_type "array"
	nparams 1
	  param in name "class_name" explicit_type "string"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Custom query result.

@param	${t0}	${p0}
@return	${type}
"
      end

      operation 568194 "result_object"
	public explicit_return_type "array"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Query result. \"object\" version.

@return	${type}
"
      end

      operation 568322 "result_array"
	public explicit_return_type "array"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Query result. \"array\" version.

@return	${type}
"
      end

      operation 568450 "row"
	public explicit_return_type "mixed"
	nparams 2
	  param in name "n" explicit_type "mixed"
	    defaultvalue "0"
	  param in name "type" explicit_type "string"
	    defaultvalue "'object'"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Row

A wrapper method.

@param	${t0}	${p0}
@param	${t1}	${p1}	'object' or 'array'
@return	${type}
"
      end

      operation 568578 "set_row"
	public explicit_return_type "void"
	nparams 2
	  param in name "key" explicit_type "mixed"
	  param in name "value" explicit_type "mixed"
	    defaultvalue "NULL"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Assigns an item into a particular column slot

@param	${t0}	${p0}
@param	${t1}	${p1}
@return	${type}
"
      end

      operation 568706 "custom_row_object"
	public explicit_return_type "object"
	nparams 2
	  param in name "n" explicit_type "int"
	  param in name "type" explicit_type "string"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Returns a single result row - custom object version

@param	${t0}	${p0}
@param	${t1}	${p1}
@return	${type}
"
      end

      operation 568834 "row_object"
	public explicit_return_type "object"
	nparams 1
	  param in name "n" explicit_type "int"
	    defaultvalue "0"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Returns a single result row - object version

@param	${t0}	${p0}
@return	${type}
"
      end

      operation 568962 "row_array"
	public explicit_return_type "array"
	nparams 1
	  param in name "n" explicit_type "int"
	    defaultvalue "0"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Returns a single result row - array version

@param	${t0}	${p0}
@return	${type}
"
      end

      operation 569090 "first_row"
	public explicit_return_type "mixed"
	nparams 1
	  param in name "type" explicit_type "string"
	    defaultvalue "'object'"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Returns the \"first\" row

@param	${t0}	${p0}
@return	${type}
"
      end

      operation 569218 "last_row"
	public explicit_return_type "mixed"
	nparams 1
	  param in name "type" explicit_type "string"
	    defaultvalue "'object'"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Returns the \"last\" row

@param	${t0}	${p0}
@return	${type}
"
      end

      operation 569346 "next_row"
	public explicit_return_type "mixed"
	nparams 1
	  param in name "type" explicit_type "string"
	    defaultvalue "'object'"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Returns the \"next\" row

@param	${t0}	${p0}
@return	${type}
"
      end

      operation 569474 "previous_row"
	public explicit_return_type "mixed"
	nparams 1
	  param in name "type" explicit_type "string"
	    defaultvalue "'object'"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Returns the \"previous\" row

@param	${t0}	${p0}
@return	${type}
"
      end

      operation 569602 "unbuffered_row"
	public explicit_return_type "mixed"
	nparams 1
	  param in name "type" explicit_type "string"
	    defaultvalue "'object'"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Returns an unbuffered row and move pointer to next row

@param	${t0}	${p0}	'array', 'object' or a custom class name
@return	${type}
"
      end

      operation 569730 "num_fields"
	public explicit_return_type "int"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

The following methods are normally overloaded by the identically named
methods in the platform-specific driver -- except when query caching
is used. When caching is enabled we do not load the other driver.
These functions are primarily here to prevent undefined function errors
when a cached result object is in use. They are not otherwise fully
operational due to the unavailability of the database resource IDs with
cached results.

 --------------------------------------------------------------------

Number of fields in the result set

Overridden by driver result classes.

@return	${type}
"
      end

      operation 569858 "list_fields"
	public explicit_return_type "array"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Fetch Field Names

Generates an array of column names.

Overridden by driver result classes.

@return	${type}
"
      end

      operation 569986 "field_data"
	public explicit_return_type "array"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Field data

Generates an array of objects containing field meta-data.

Overridden by driver result classes.

@return	${type}
"
      end

      operation 570114 "free_result"
	public explicit_return_type "void"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Free the result

Overridden by driver result classes.

@return	${type}
"
      end

      operation 570242 "data_seek"
	public explicit_return_type "bool"
	nparams 1
	  param in name "n" explicit_type "int"
	    defaultvalue "0"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Data Seek

Moves the internal pointer to the desired offset. We call
this internally before fetching results to make sure the
result set starts at zero.

Overridden by driver result classes.

@param	${t0}	${p0}
@return	${type}
"
      end

      operation 570370 "_fetch_assoc"
	protected explicit_return_type "array"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Result - associative array

Returns the result set as an array.

Overridden by driver result classes.

@return	${type}
"
      end

      operation 570498 "_fetch_object"
	protected explicit_return_type "object"
	nparams 1
	  param in name "class_name" explicit_type "string"
	    defaultvalue "'stdClass'"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Result - object

Returns the result set as an object.

Overridden by driver result classes.

@param	${t0}	${p0}
@return	${type}
"
      end
    end

    class 158594 "CI_DB_utility"
      abstract visibility package 
      cpp_decl ""
      java_decl ""
      php_decl "${comment}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
Database Utility Class

@category	Database
@author		EllisLab Dev Team
@link		https://codeigniter.com/user_guide/database/
"
      attribute 344450 "db"
	protected explicit_type "object"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Database object

@var	${type}
"
      end

      attribute 344578 "_list_databases"
	protected explicit_type "string"
	init_value " FALSE"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " --------------------------------------------------------------------

List databases statement

@var	${type}
"
      end

      attribute 344706 "_optimize_table"
	protected explicit_type "string"
	init_value " FALSE"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
OPTIMIZE TABLE statement

@var	${type}
"
      end

      attribute 344834 "_repair_table"
	protected explicit_type "string"
	init_value " FALSE"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
REPAIR TABLE statement

@var	${type}
"
      end

      operation 570626 "__construct"
	public explicit_return_type "void"
	nparams 1
	  param inout name "db" explicit_type "object"
	
	
	preserve_php_body_indent php_def "  ${comment}${visibility}function ${name}${(}& ${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Class constructor

@param	${t0}	&$db	Database object
@return	${type}
"
      end

      operation 570754 "list_databases"
	public explicit_return_type "array"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

List databases

@return	${type}
"
      end

      operation 570882 "database_exists"
	public explicit_return_type "bool"
	nparams 1
	  param in name "database_name" explicit_type "string"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Determine if a particular database exists

@param	${t0}	${p0}
@return	${type}
"
      end

      operation 571010 "optimize_table"
	public explicit_return_type "mixed"
	nparams 1
	  param in name "table_name" explicit_type "string"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Optimize Table

@param	${t0}	${p0}
@return	${type}
"
      end

      operation 571138 "optimize_database"
	public explicit_return_type "mixed"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Optimize Database

@return	${type}
"
      end

      operation 571266 "repair_table"
	public explicit_return_type "mixed"
	nparams 1
	  param in name "table_name" explicit_type "string"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Repair Table

@param	${t0}	${p0}
@return	${type}
"
      end

      operation 571394 "csv_from_result"
	public explicit_return_type "string"
	nparams 4
	  param in name "query" explicit_type "object"
	  param in name "delim" explicit_type "string"
	    defaultvalue "','"
	  param in name "newline" explicit_type "string"
	    defaultvalue "\"\\n\""
	  param in name "enclosure" explicit_type "string"
	    defaultvalue "'\"'"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}, ${p3}${v3}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Generate CSV from a query result object

@param	${t0}	${p0}		Query result object
@param	${t1}	${p1}		Delimiter (default: ,)
@param	${t2}	${p2}	Newline character (default: \\n)
@param	${t3}	${p3}	Enclosure (default: \")
@return	${type}
"
      end

      operation 571522 "xml_from_result"
	public explicit_return_type "string"
	nparams 2
	  param in name "query" explicit_type "object"
	  param in name "params" explicit_type "array"
	    defaultvalue "array()"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Generate XML data from a query result object

@param	${t0}	${p0}	Query result object
@param	${t1}	${p1}	Any preferences
@return	${type}
"
      end

      operation 571650 "backup"
	public explicit_return_type "string"
	nparams 1
	  param in name "params" explicit_type "array"
	    defaultvalue "array()"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Database Backup

@param	${t0}	${p0}
@return	${type}
"
      end
    end

    class 161410 "CI_DB_driver"
      abstract visibility package 
      cpp_decl ""
      java_decl ""
      php_decl "${comment}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
Database Driver Class

This is the platform-independent base DB implementation class.
This class will not be called directly. Rather, the adapter
class for the specific database will extend and instantiate it.

@package		CodeIgniter
@subpackage	Drivers
@category	Database
@author		EllisLab Dev Team
@link		https://codeigniter.com/user_guide/database/
"
      attribute 332418 "dsn"
	public explicit_type "string"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Data Source Name / Connect string

@var	${type}
"
      end

      attribute 332546 "username"
	public explicit_type "string"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Username

@var	${type}
"
      end

      attribute 332674 "password"
	public explicit_type "string"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Password

@var	${type}
"
      end

      attribute 332802 "hostname"
	public explicit_type "string"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Hostname

@var	${type}
"
      end

      attribute 332930 "database"
	public explicit_type "string"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Database name

@var	${type}
"
      end

      attribute 333058 "dbdriver"
	public explicit_type "string"
	init_value " 'mysqli'"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Database driver

@var	${type}
"
      end

      attribute 333186 "subdriver"
	public explicit_type "string"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Sub-driver

@used-by	CI_DB_pdo_driver
@var	${type}
"
      end

      attribute 333314 "dbprefix"
	public explicit_type "string"
	init_value " ''"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Table prefix

@var	${type}
"
      end

      attribute 333442 "char_set"
	public explicit_type "string"
	init_value " 'utf8'"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Character set

@var	${type}
"
      end

      attribute 333570 "dbcollat"
	public explicit_type "string"
	init_value " 'utf8_general_ci'"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Collation

@var	${type}
"
      end

      attribute 333698 "encrypt"
	public explicit_type "mixed"
	init_value " FALSE"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Encryption flag/data

@var	${type}
"
      end

      attribute 333826 "swap_pre"
	public explicit_type "string"
	init_value " ''"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Swap Prefix

@var	${type}
"
      end

      attribute 333954 "port"
	public explicit_type "int"
	init_value " ''"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Database port

@var	${type}
"
      end

      attribute 334082 "pconnect"
	public explicit_type "bool"
	init_value " FALSE"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Persistent connection flag

@var	${type}
"
      end

      attribute 334210 "conn_id"
	public explicit_type "object|resource"
	init_value " FALSE"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Connection ID

@var	${type}
"
      end

      attribute 334338 "result_id"
	public explicit_type "object|resource"
	init_value " FALSE"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Result ID

@var	${type}
"
      end

      attribute 334466 "db_debug"
	public explicit_type "bool"
	init_value " FALSE"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Debug flag

Whether to display error messages.

@var	${type}
"
      end

      attribute 334594 "benchmark"
	public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Benchmark time

@var	${type}
"
      end

      attribute 334722 "query_count"
	public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Executed queries count

@var	${type}
"
      end

      attribute 334850 "bind_marker"
	public explicit_type "string"
	init_value " '?'"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Bind marker

Character used to identify values in a prepared statement.

@var	${type}
"
      end

      attribute 334978 "save_queries"
	public explicit_type "bool"
	init_value " TRUE"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Save queries flag

Whether to keep an in-memory history of queries for debugging purposes.

@var	${type}
"
      end

      attribute 335106 "queries"
	public explicit_type "string[]"
	init_value " array()"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Queries list

@see	CI_DB_driver::$save_queries
@var	${type}
"
      end

      attribute 335234 "query_times"
	public explicit_type "array"
	init_value " array()"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Query times

A list of times that queries took to execute.

@var	${type}
"
      end

      attribute 335362 "data_cache"
	public explicit_type "array"
	init_value " array()"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Data cache

An internal generic value cache.

@var	${type}
"
      end

      attribute 335490 "trans_enabled"
	public explicit_type "bool"
	init_value " TRUE"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Transaction enabled flag

@var	${type}
"
      end

      attribute 335618 "trans_strict"
	public explicit_type "bool"
	init_value " TRUE"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Strict transaction mode flag

@var	${type}
"
      end

      attribute 335746 "_trans_depth"
	protected explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Transaction depth level

@var	${type}
"
      end

      attribute 335874 "_trans_status"
	protected explicit_type "bool"
	init_value " TRUE"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Transaction status flag

Used with transactions to determine if a rollback should occur.

@var	${type}
"
      end

      attribute 336002 "_trans_failure"
	protected explicit_type "bool"
	init_value " FALSE"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Transaction failure flag

Used with transactions to determine if a transaction has failed.

@var	${type}
"
      end

      attribute 336130 "cache_on"
	public explicit_type "bool"
	init_value " FALSE"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Cache On flag

@var	${type}
"
      end

      attribute 336258 "cachedir"
	public explicit_type "bool"
	init_value " ''"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Cache directory path

@var	${type}
"
      end

      attribute 336386 "cache_autodel"
	public explicit_type "bool"
	init_value " FALSE"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Cache auto-delete flag

@var	${type}
"
      end

      attribute 336514 "CACHE"
	public explicit_type "object"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
DB Cache object

@see	CI_DB_cache
@var	${type}
"
      end

      attribute 336642 "_protect_identifiers"
	protected explicit_type "bool"
	init_value " TRUE"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Protect identifiers flag

@var	${type}
"
      end

      attribute 336770 "_reserved_identifiers"
	protected explicit_type "string[]"
	init_value " array('*')"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
List of reserved identifiers

Identifiers that must NOT be escaped.

@var	${type}
"
      end

      attribute 336898 "_escape_char"
	protected explicit_type "string"
	init_value " '\"'"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Identifier escape character

@var	${type}
"
      end

      attribute 337026 "_like_escape_str"
	protected explicit_type "string"
	init_value " \" ESCAPE '%s' \""
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
ESCAPE statement string

@var	${type}
"
      end

      attribute 337154 "_like_escape_chr"
	protected explicit_type "string"
	init_value " '!'"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
ESCAPE character

@var	${type}
"
      end

      attribute 337282 "_random_keyword"
	protected explicit_type "array"
	init_value " array('RAND()', 'RAND(%d)')"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
ORDER BY random keyword

@var	${type}
"
      end

      attribute 337410 "_count_string"
	protected explicit_type "string"
	init_value " 'SELECT COUNT(*) AS '"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
COUNT string

@used-by	CI_DB_driver::count_all()
@used-by	CI_DB_query_builder::count_all_results()

@var	${type}
"
      end

      operation 546946 "__construct"
	public explicit_return_type "void"
	nparams 1
	  param in name "params" explicit_type "array"
	
	
	preserve_php_body_indent php_def "  ${comment}${visibility}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Class constructor

@param	${t0}	${p0}
@return	${type}
"
      end

      operation 547074 "initialize"
	public explicit_return_type "bool"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Initialize Database Settings

@return	${type}
"
      end

      operation 547202 "db_connect"
	public explicit_return_type "mixed"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

DB connect

This is just a dummy method that all drivers will override.

@return	${type}
"
      end

      operation 547330 "db_pconnect"
	public explicit_return_type "mixed"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Persistent database connection

@return	${type}
"
      end

      operation 547458 "reconnect"
	public explicit_return_type "void"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Reconnect

Keep / reestablish the db connection if no queries have been
sent for a length of time exceeding the server's idle timeout.

This is just a dummy method to allow drivers without such
functionality to not declare it, while others will override it.

@return	${type}
"
      end

      operation 547586 "db_select"
	public explicit_return_type "bool"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Select database

This is just a dummy method to allow drivers without such
functionality to not declare it, while others will override it.

@return	${type}
"
      end

      operation 547714 "error"
	public explicit_return_type "array"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Last error

@return	${type}
"
      end

      operation 547842 "db_set_charset"
	public explicit_return_type "bool"
	nparams 1
	  param in name "charset" explicit_type "string"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Set client character set

@param	${t0}
@return	${type}
"
      end

      operation 547970 "platform"
	public explicit_return_type "string"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

The name of the platform in use (mysql, mssql, etc...)

@return	${type}
"
      end

      operation 548098 "version"
	public explicit_return_type "string"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Database version number

Returns a string containing the version of the database being used.
Most drivers will override this method.

@return	${type}
"
      end

      operation 548226 "_version"
	protected explicit_return_type "string"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Version number query string

@return	${type}
"
      end

      operation 548354 "query"
	public explicit_return_type "mixed"
	nparams 3
	  param in name "sql" explicit_type "string"
	  param in name "binds" explicit_type "array"
	    defaultvalue "FALSE"
	  param in name "return_object" explicit_type "bool"
	    defaultvalue "NULL"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Execute the query

Accepts an SQL string as input and returns a result object upon
successful execution of a \"read\" type query. Returns boolean TRUE
upon successful execution of a \"write\" type query. Returns boolean
FALSE upon failure, and if the $db_debug variable is set to TRUE
will raise an error.

@param	${t0}	${p0}
@param	${t1}	${p1} = FALSE		An array of binding data
@param	${t2}	${p2} = NULL
@return	${type}
"
      end

      operation 548482 "load_rdriver"
	public explicit_return_type "string"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Load the result drivers

@return	${type}	the name of the result class
"
      end

      operation 548610 "simple_query"
	public explicit_return_type "mixed"
	nparams 1
	  param in name "sql" explicit_type "string"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Simple Query
This is a simplified version of the query() function. Internally
we only use it when running transaction commands since they do
not require all the features of the main query() function.

@param	${t0}	the sql query
@return	${type}
"
      end

      operation 548738 "trans_off"
	public explicit_return_type "void"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Disable Transactions
This permits transactions to be disabled at run-time.

@return	${type}
"
      end

      operation 548866 "trans_strict"
	public explicit_return_type "void"
	nparams 1
	  param in name "mode" explicit_type "bool"
	    defaultvalue "TRUE"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Enable/disable Transaction Strict Mode

When strict mode is enabled, if you are running multiple groups of
transactions, if one group fails all subsequent groups will be
rolled back.

If strict mode is disabled, each group is treated autonomously,
meaning a failure of one group will not affect any others

@param	${t0}	${p0} = TRUE
@return	${type}
"
      end

      operation 548994 "trans_start"
	public explicit_return_type "bool"
	nparams 1
	  param in name "test_mode" explicit_type "bool"
	    defaultvalue "FALSE"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Start Transaction

@param	${t0}	${p0} = FALSE
@return	${type}
"
      end

      operation 549122 "trans_complete"
	public explicit_return_type "bool"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Complete Transaction

@return	${type}
"
      end

      operation 549250 "trans_status"
	public explicit_return_type "bool"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Lets you retrieve the transaction flag to determine if it has failed

@return	${type}
"
      end

      operation 549378 "trans_begin"
	public explicit_return_type "bool"
	nparams 1
	  param in name "test_mode" explicit_type "bool"
	    defaultvalue "FALSE"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Begin Transaction

@param	${t0}	${p0}
@return	${type}
"
      end

      operation 549506 "trans_commit"
	public explicit_return_type "bool"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Commit Transaction

@return	${type}
"
      end

      operation 549634 "trans_rollback"
	public explicit_return_type "bool"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Rollback Transaction

@return	${type}
"
      end

      operation 549762 "compile_binds"
	public explicit_return_type "string"
	nparams 2
	  param in name "sql" explicit_type "string"
	  param in name "binds" explicit_type "array"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Compile Bindings

@param	${t0}	the sql statement
@param	${t1}	an array of bind data
@return	${type}
"
      end

      operation 549890 "is_write_type"
	public explicit_return_type "bool"
	nparams 1
	  param in name "sql" explicit_type "string"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Determines if a query is a \"write\" type.

@param	${t0}	An SQL query string
@return	${type}
"
      end

      operation 550018 "elapsed_time"
	public explicit_return_type "string"
	nparams 1
	  param in name "decimals" explicit_type "int"
	    defaultvalue "6"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Calculate the aggregate query elapsed time

@param	${t0}	The number of decimal places
@return	${type}
"
      end

      operation 550146 "total_queries"
	public explicit_return_type "int"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Returns the total number of queries

@return	${type}
"
      end

      operation 550274 "last_query"
	public explicit_return_type "string"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Returns the last query that was executed

@return	${type}
"
      end

      operation 550402 "escape"
	public explicit_return_type "mixed"
	nparams 1
	  param in name "str" explicit_type "string"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

\"Smart\" Escape String

Escapes data based on type
Sets boolean and null types

@param	${t0}
@return	${type}
"
      end

      operation 550530 "escape_str"
	public explicit_return_type "string"
	nparams 2
	  param in name "str" explicit_type "string|string[]"
	  param in name "like" explicit_type "bool"
	    defaultvalue "FALSE"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Escape String

@param	${t0}	${p0}	Input string
@param	${t1}	${p1}	Whether or not the string will be used in a LIKE condition
@return	${type}
"
      end

      operation 550658 "escape_like_str"
	public explicit_return_type "mixed"
	nparams 1
	  param in name "str" explicit_type "string|string[]"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Escape LIKE String

Calls the individual driver for platform
specific escaping for LIKE conditions

@param	${t0}
@return	${type}
"
      end

      operation 550786 "_escape_str"
	protected explicit_return_type "string"
	nparams 1
	  param in name "str" explicit_type "string"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Platform-dependent string escape

@param	${t0}
@return	${type}
"
      end

      operation 550914 "primary"
	public explicit_return_type "string"
	nparams 1
	  param in name "table" explicit_type "string"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Primary

Retrieves the primary key. It assumes that the row in the first
position is the primary key

@param	${t0}	${p0}	Table name
@return	${type}
"
      end

      operation 551042 "count_all"
	public explicit_return_type "int"
	nparams 1
	  param in name "table" explicit_type "string"
	    defaultvalue "''"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

\"Count All\" query

Generates a platform-specific query string that counts all records in
the specified database

@param	${t0}
@return	${type}
"
      end

      operation 551170 "list_tables"
	public explicit_return_type "array"
	nparams 1
	  param in name "constrain_by_prefix" explicit_type "string"
	    defaultvalue "FALSE"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Returns an array of table names

@param	${t0}	${p0} = FALSE
@return	${type}
"
      end

      operation 551298 "table_exists"
	public explicit_return_type "bool"
	nparams 1
	  param in name "table_name" explicit_type "string"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Determine if a particular table exists

@param	${t0}	${p0}
@return	${type}
"
      end

      operation 551426 "list_fields"
	public explicit_return_type "array"
	nparams 1
	  param in name "table" explicit_type "string"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Fetch Field Names

@param	${t0}	${p0}	Table name
@return	${type}
"
      end

      operation 551554 "field_exists"
	public explicit_return_type "bool"
	nparams 2
	  param in name "field_name" explicit_type "string"
	  param in name "table_name" explicit_type "string"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Determine if a particular field exists

@param	${t0}
@param	${t1}
@return	${type}
"
      end

      operation 551682 "field_data"
	public explicit_return_type "array"
	nparams 1
	  param in name "table" explicit_type "string"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Returns an object with field data

@param	${t0}	${p0}	the table name
@return	${type}
"
      end

      operation 551810 "escape_identifiers"
	public explicit_return_type "mixed"
	nparams 1
	  param in name "item" explicit_type "mixed"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Escape the SQL Identifiers

This function escapes column and table names

@param	${t0}
@return	${type}
"
      end

      operation 551938 "insert_string"
	public explicit_return_type "string"
	nparams 2
	  param in name "table" explicit_type "string"
	  param in name "data" explicit_type "array"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Generate an insert string

@param	${t0}	the table upon which the query will be performed
@param	${t1}	an associative array data of key/values
@return	${type}
"
      end

      operation 552066 "_insert"
	protected explicit_return_type "string"
	nparams 3
	  param in name "table" explicit_type "string"
	  param in name "keys" explicit_type "array"
	  param in name "values" explicit_type "array"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Insert statement

Generates a platform-specific insert string from the supplied data

@param	${t0}	the table name
@param	${t1}	the insert keys
@param	${t2}	the insert values
@return	${type}
"
      end

      operation 552194 "update_string"
	public explicit_return_type "string"
	nparams 3
	  param in name "table" explicit_type "string"
	  param in name "data" explicit_type "array"
	  param in name "where" explicit_type "mixed"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Generate an update string

@param	${t0}	the table upon which the query will be performed
@param	${t1}	an associative array data of key/values
@param	${t2}	the \"where\" statement
@return	${type}
"
      end

      operation 552322 "_update"
	protected explicit_return_type "string"
	nparams 2
	  param in name "table" explicit_type "string"
	  param in name "values" explicit_type "array"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Update statement

Generates a platform-specific update string from the supplied data

@param	${t0}	the table name
@param	${t1}	the update data
@return	${type}
"
      end

      operation 552450 "_has_operator"
	protected explicit_return_type "bool"
	nparams 1
	  param in name "str" explicit_type "string"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Tests whether the string has an SQL operator

@param	${t0}
@return	${type}
"
      end

      operation 552578 "_get_operator"
	protected explicit_return_type "string"
	nparams 1
	  param in name "str" explicit_type "string"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Returns the SQL string operator

@param	${t0}
@return	${type}
"
      end

      operation 552706 "call_function"
	public explicit_return_type "mixed"
	nparams 1
	  param in name "function" explicit_type "string"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Enables a native PHP function to be run, using a platform agnostic wrapper.

@param	${t0}	${p0}	Function name
@return	${type}
"
      end

      operation 552834 "cache_set_path"
	public explicit_return_type "void"
	nparams 1
	  param in name "path" explicit_type "string"
	    defaultvalue "''"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Set Cache Directory Path

@param	${t0}	the path to the cache directory
@return	${type}
"
      end

      operation 552962 "cache_on"
	public explicit_return_type "bool"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Enable Query Caching

@return	${type}	cache_on value
"
      end

      operation 553090 "cache_off"
	public explicit_return_type "bool"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Disable Query Caching

@return	${type}	cache_on value
"
      end

      operation 553218 "cache_delete"
	public explicit_return_type "bool"
	nparams 2
	  param in name "segment_one" explicit_type "string"
	    defaultvalue "''"
	  param in name "segment_two" explicit_type "string"
	    defaultvalue "''"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Delete the cache files associated with a particular URI

@param	${t0}	${p0} = ''
@param	${t1}	${p1} = ''
@return	${type}
"
      end

      operation 553346 "cache_delete_all"
	public explicit_return_type "bool"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Delete All cache files

@return	${type}
"
      end

      operation 553474 "_cache_init"
	protected explicit_return_type "bool"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Initialize the Cache Class

@return	${type}
"
      end

      operation 553602 "close"
	public explicit_return_type "void"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Close DB Connection

@return	${type}
"
      end

      operation 553730 "_close"
	protected explicit_return_type "void"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Close DB Connection

This method would be overridden by most of the drivers.

@return	${type}
"
      end

      operation 553858 "display_error"
	public explicit_return_type "string"
	nparams 3
	  param in name "error" explicit_type "string"
	    defaultvalue "''"
	  param in name "swap" explicit_type "string"
	    defaultvalue "''"
	  param in name "native" explicit_type "bool"
	    defaultvalue "FALSE"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Display an error message

@param	${t0}	the error message
@param	${t1}	any \"swap\" values
@param	${t2}	whether to localize the message
@return	${type}	sends the application/views/errors/error_db.php template
"
      end

      operation 553986 "protect_identifiers"
	public explicit_return_type "string"
	nparams 4
	  param in name "item" explicit_type "string"
	  param in name "prefix_single" explicit_type "bool"
	    defaultvalue "FALSE"
	  param in name "protect_identifiers" explicit_type "mixed"
	    defaultvalue "NULL"
	  param in name "field_exists" explicit_type "bool"
	    defaultvalue "TRUE"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}, ${p3}${v3}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Protect Identifiers

This function is used extensively by the Query Builder class, and by
a couple functions in this class.
It takes a column or table name (optionally with an alias) and inserts
the table prefix onto it. Some logic is necessary in order to deal with
column names that include the path. Consider a query like this:

SELECT hostname.database.table.column AS c FROM hostname.database.table

Or a query with aliasing:

SELECT m.member_id, m.member_name FROM members AS m

Since the column name can include up to four segments (host, DB, table, column)
or also have an alias prefix, we need to do a bit of work to figure this out and
insert the table prefix (if it exists) in the proper position, and escape only
the correct identifiers.

@param	${t0}
@param	${t1}
@param	${t2}
@param	${t3}
@return	${type}
"
      end

      operation 554114 "_reset_select"
	protected explicit_return_type "void"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Dummy method that allows Query Builder class to be disabled
and keep count_all() working.

@return	${type}
"
      end
    end

    class 176002 "CI_DB_Cache"
      visibility package 
      cpp_decl ""
      java_decl ""
      php_decl "${comment}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
Database Cache Class

@category	Database
@author		EllisLab Dev Team
@link		https://codeigniter.com/user_guide/database/
"
      attribute 332162 "CI"
	public explicit_type "object"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
CI Singleton

@var	${type}
"
      end

      attribute 332290 "db"
	public explicit_type "object"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Database object

Allows passing of DB object so that multiple database connections
and returned DB objects can be supported.

@var	${type}
"
      end

      operation 546178 "__construct"
	public explicit_return_type "void"
	nparams 1
	  param inout name "db" explicit_type "object"
	
	
	preserve_php_body_indent php_def "  ${comment}${visibility}function ${name}${(}& ${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Constructor

@param	${t0}	&$db
@return	${type}
"
      end

      operation 546306 "check_path"
	public explicit_return_type "bool"
	nparams 1
	  param in name "path" explicit_type "string"
	    defaultvalue "''"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Set Cache Directory Path

@param	${t0}	${p0}	Path to the cache directory
@return	${type}
"
      end

      operation 546434 "read"
	public explicit_return_type "string"
	nparams 1
	  param in name "sql" explicit_type "string"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Retrieve a cached query

The URI being requested will become the name of the cache sub-folder.
An MD5 hash of the SQL statement will become the cache file name.

@param	${t0}	${p0}
@return	${type}
"
      end

      operation 546562 "write"
	public explicit_return_type "bool"
	nparams 2
	  param in name "sql" explicit_type "string"
	  param in name "object" explicit_type "object"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Write a query to a cache file

@param	${t0}	${p0}
@param	${t1}	${p1}
@return	${type}
"
      end

      operation 546690 "delete"
	public explicit_return_type "void"
	nparams 2
	  param in name "segment_one" explicit_type "string"
	    defaultvalue "''"
	  param in name "segment_two" explicit_type "string"
	    defaultvalue "''"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Delete cache files within a particular directory

@param	${t0}	${p0}
@param	${t1}	${p1}
@return	${type}
"
      end

      operation 546818 "delete_all"
	public explicit_return_type "void"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Delete all existing cache files

@return	${type}
"
      end
    end

    class 176130 "CI_DB_query_builder"
      abstract visibility package 
      cpp_decl ""
      java_decl ""
      php_decl "${comment}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
Query Builder Class

This is the platform-independent base Query Builder implementation class.

@package		CodeIgniter
@subpackage	Drivers
@category	Database
@author		EllisLab Dev Team
@link		https://codeigniter.com/user_guide/database/
"
      classrelation 162434 // <generalisation>
	relation 162434 ---|>
	  a public
	    php "${type}"
	    classrelation_ref 162434 // <generalisation>
	  b parent class_ref 161410 // CI_DB_driver
      end

      attribute 339458 "return_delete_sql"
	protected explicit_type "bool"
	init_value " FALSE"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Return DELETE SQL flag

@var	${type}
"
      end

      attribute 339586 "reset_delete_data"
	protected explicit_type "bool"
	init_value " FALSE"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
Reset DELETE data flag

@var	${type}
"
      end

      attribute 339714 "qb_select"
	protected explicit_type "array"
	init_value " array()"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
QB SELECT data

@var	${type}
"
      end

      attribute 339842 "qb_distinct"
	protected explicit_type "bool"
	init_value " FALSE"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
QB DISTINCT flag

@var	${type}
"
      end

      attribute 339970 "qb_from"
	protected explicit_type "array"
	init_value " array()"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
QB FROM data

@var	${type}
"
      end

      attribute 340098 "qb_join"
	protected explicit_type "array"
	init_value " array()"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
QB JOIN data

@var	${type}
"
      end

      attribute 340226 "qb_where"
	protected explicit_type "array"
	init_value " array()"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
QB WHERE data

@var	${type}
"
      end

      attribute 340354 "qb_groupby"
	protected explicit_type "array"
	init_value " array()"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
QB GROUP BY data

@var	${type}
"
      end

      attribute 340482 "qb_having"
	protected explicit_type "array"
	init_value " array()"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
QB HAVING data

@var	${type}
"
      end

      attribute 340610 "qb_keys"
	protected explicit_type "array"
	init_value " array()"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
QB keys

@var	${type}
"
      end

      attribute 340738 "qb_limit"
	protected explicit_type "int"
	init_value " FALSE"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
QB LIMIT data

@var	${type}
"
      end

      attribute 340866 "qb_offset"
	protected explicit_type "int"
	init_value " FALSE"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
QB OFFSET data

@var	${type}
"
      end

      attribute 340994 "qb_orderby"
	protected explicit_type "array"
	init_value " array()"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
QB ORDER BY data

@var	${type}
"
      end

      attribute 341122 "qb_set"
	protected explicit_type "array"
	init_value " array()"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
QB data sets

@var	${type}
"
      end

      attribute 341250 "qb_set_ub"
	protected explicit_type "array"
	init_value " array()"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
QB data set for update_batch()

@var	${type}
"
      end

      attribute 341378 "qb_aliased_tables"
	protected explicit_type "array"
	init_value " array()"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
QB aliased tables list

@var	${type}
"
      end

      attribute 341506 "qb_where_group_started"
	protected explicit_type "bool"
	init_value " FALSE"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
QB WHERE group started flag

@var	${type}
"
      end

      attribute 341634 "qb_where_group_count"
	protected explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
QB WHERE group count

@var	${type}
"
      end

      attribute 341762 "qb_caching"
	protected explicit_type "bool"
	init_value " FALSE"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Query Builder Caching variables

QB Caching flag

@var	${type}
"
      end

      attribute 341890 "qb_cache_exists"
	protected explicit_type "array"
	init_value " array()"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
QB Cache exists list

@var	${type}
"
      end

      attribute 342018 "qb_cache_select"
	protected explicit_type "array"
	init_value " array()"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
QB Cache SELECT data

@var	${type}
"
      end

      attribute 342146 "qb_cache_from"
	protected explicit_type "array"
	init_value " array()"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
QB Cache FROM data

@var	${type}
"
      end

      attribute 342274 "qb_cache_join"
	protected explicit_type "array"
	init_value " array()"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
QB Cache JOIN data

@var	${type}
"
      end

      attribute 342402 "qb_cache_aliased_tables"
	protected explicit_type "array"
	init_value " array()"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
QB Cache aliased tables list

@var	${type}
"
      end

      attribute 342530 "qb_cache_where"
	protected explicit_type "array"
	init_value " array()"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
QB Cache WHERE data

@var	${type}
"
      end

      attribute 342658 "qb_cache_groupby"
	protected explicit_type "array"
	init_value " array()"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
QB Cache GROUP BY data

@var	${type}
"
      end

      attribute 342786 "qb_cache_having"
	protected explicit_type "array"
	init_value " array()"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
QB Cache HAVING data

@var	${type}
"
      end

      attribute 342914 "qb_cache_orderby"
	protected explicit_type "array"
	init_value " array()"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
QB Cache ORDER BY data

@var	${type}
"
      end

      attribute 343042 "qb_cache_set"
	protected explicit_type "array"
	init_value " array()"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
QB Cache data sets

@var	${type}
"
      end

      attribute 343170 "qb_no_escape"
	protected explicit_type "array"
	init_value " array()"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
QB No Escape data

@var	${type}
"
      end

      attribute 343298 "qb_cache_no_escape"
	protected explicit_type "array"
	init_value " array()"
	cpp_decl ""
	java_decl ""
	php_decl "  ${comment}${visibility}${const}${static}${var}${name}${value};
"
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "
QB Cache No Escape data

@var	${type}
"
      end

      operation 557442 "select"
	public explicit_return_type "CI_DB_query_builder"
	nparams 2
	  param in name "select" explicit_type "string"
	    defaultvalue "'*'"
	  param in name "escape" explicit_type "mixed"
	    defaultvalue "NULL"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Select

Generates the SELECT portion of the query

@param	${t0}
@param	${t1}
@return	${type}
"
      end

      operation 557570 "select_max"
	public explicit_return_type "CI_DB_query_builder"
	nparams 2
	  param in name "select" explicit_type "string"
	    defaultvalue "''"
	  param in name "alias" explicit_type "string"
	    defaultvalue "''"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Select Max

Generates a SELECT MAX(field) portion of a query

@param	${t0}	the field
@param	${t1}	an alias
@return	${type}
"
      end

      operation 557698 "select_min"
	public explicit_return_type "CI_DB_query_builder"
	nparams 2
	  param in name "select" explicit_type "string"
	    defaultvalue "''"
	  param in name "alias" explicit_type "string"
	    defaultvalue "''"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Select Min

Generates a SELECT MIN(field) portion of a query

@param	${t0}	the field
@param	${t1}	an alias
@return	${type}
"
      end

      operation 557826 "select_avg"
	public explicit_return_type "CI_DB_query_builder"
	nparams 2
	  param in name "select" explicit_type "string"
	    defaultvalue "''"
	  param in name "alias" explicit_type "string"
	    defaultvalue "''"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Select Average

Generates a SELECT AVG(field) portion of a query

@param	${t0}	the field
@param	${t1}	an alias
@return	${type}
"
      end

      operation 557954 "select_sum"
	public explicit_return_type "CI_DB_query_builder"
	nparams 2
	  param in name "select" explicit_type "string"
	    defaultvalue "''"
	  param in name "alias" explicit_type "string"
	    defaultvalue "''"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Select Sum

Generates a SELECT SUM(field) portion of a query

@param	${t0}	the field
@param	${t1}	an alias
@return	${type}
"
      end

      operation 558082 "_max_min_avg_sum"
	protected explicit_return_type "CI_DB_query_builder"
	nparams 3
	  param in name "select" explicit_type "string"
	    defaultvalue "''"
	  param in name "alias" explicit_type "string"
	    defaultvalue "''"
	  param in name "type" explicit_type "string"
	    defaultvalue "'MAX'"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

SELECT [MAX|MIN|AVG|SUM]()

@used-by	select_max()
@used-by	select_min()
@used-by	select_avg()
@used-by	select_sum()

@param	${t0}	${p0}	Field name
@param	${t1}	${p1}
@param	${t2}	${p2}
@return	${type}
"
      end

      operation 558210 "_create_alias_from_table"
	protected explicit_return_type "string"
	nparams 1
	  param in name "item" explicit_type "string"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Determines the alias name based on the table

@param	${t0}	${p0}
@return	${type}
"
      end

      operation 558338 "distinct"
	public explicit_return_type "CI_DB_query_builder"
	nparams 1
	  param in name "val" explicit_type "bool"
	    defaultvalue "TRUE"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

DISTINCT

Sets a flag which tells the query string compiler to add DISTINCT

@param	${t0}	${p0}
@return	${type}
"
      end

      operation 558466 "from"
	public explicit_return_type "CI_DB_query_builder"
	nparams 1
	  param in name "from" explicit_type "mixed"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

From

Generates the FROM portion of the query

@param	${t0}	${p0}	can be a string or array
@return	${type}
"
      end

      operation 558594 "join"
	public explicit_return_type "CI_DB_query_builder"
	nparams 4
	  param in name "table" explicit_type "string"
	  param in name "cond" explicit_type "string"
	  param in name "type" explicit_type "string"
	    defaultvalue "''"
	  param in name "escape" explicit_type "string"
	    defaultvalue "NULL"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}, ${p3}${v3}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

JOIN

Generates the JOIN portion of the query

@param	${t0}
@param	${t1}	the join condition
@param	${t2}	the type of join
@param	${t3}	whether not to try to escape identifiers
@return	${type}
"
      end

      operation 558722 "where"
	public explicit_return_type "CI_DB_query_builder"
	nparams 3
	  param in name "key" explicit_type "mixed"
	  param in name "value" explicit_type "mixed"
	    defaultvalue "NULL"
	  param in name "escape" explicit_type "bool"
	    defaultvalue "NULL"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

WHERE

Generates the WHERE portion of the query.
Separates multiple calls with 'AND'.

@param	${t0}
@param	${t1}
@param	${t2}
@return	${type}
"
      end

      operation 558850 "or_where"
	public explicit_return_type "CI_DB_query_builder"
	nparams 3
	  param in name "key" explicit_type "mixed"
	  param in name "value" explicit_type "mixed"
	    defaultvalue "NULL"
	  param in name "escape" explicit_type "bool"
	    defaultvalue "NULL"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

OR WHERE

Generates the WHERE portion of the query.
Separates multiple calls with 'OR'.

@param	${t0}
@param	${t1}
@param	${t2}
@return	${type}
"
      end

      operation 558978 "_wh"
	protected explicit_return_type "CI_DB_query_builder"
	nparams 5
	  param in name "qb_key" explicit_type "string"
	  param in name "key" explicit_type "mixed"
	  param in name "value" explicit_type "mixed"
	    defaultvalue "NULL"
	  param in name "type" explicit_type "string"
	    defaultvalue "'AND '"
	  param in name "escape" explicit_type "bool"
	    defaultvalue "NULL"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}, ${p3}${v3}, ${p4}${v4}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

WHERE, HAVING

@used-by	where()
@used-by	or_where()
@used-by	having()
@used-by	or_having()

@param	${t0}	${p0}	'qb_where' or 'qb_having'
@param	${t1}	${p1}
@param	${t2}	${p2}
@param	${t3}	${p3}
@param	${t4}	${p4}
@return	${type}
"
      end

      operation 559106 "where_in"
	public explicit_return_type "CI_DB_query_builder"
	nparams 3
	  param in name "key" explicit_type "string"
	    defaultvalue "NULL"
	  param in name "values" explicit_type "array"
	    defaultvalue "NULL"
	  param in name "escape" explicit_type "bool"
	    defaultvalue "NULL"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

WHERE IN

Generates a WHERE field IN('item', 'item') SQL query,
joined with 'AND' if appropriate.

@param	${t0}	${p0}	The field to search
@param	${t1}	${p1}	The values searched on
@param	${t2}	${p2}
@return	${type}
"
      end

      operation 559234 "or_where_in"
	public explicit_return_type "CI_DB_query_builder"
	nparams 3
	  param in name "key" explicit_type "string"
	    defaultvalue "NULL"
	  param in name "values" explicit_type "array"
	    defaultvalue "NULL"
	  param in name "escape" explicit_type "bool"
	    defaultvalue "NULL"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

OR WHERE IN

Generates a WHERE field IN('item', 'item') SQL query,
joined with 'OR' if appropriate.

@param	${t0}	${p0}	The field to search
@param	${t1}	${p1}	The values searched on
@param	${t2}	${p2}
@return	${type}
"
      end

      operation 559362 "where_not_in"
	public explicit_return_type "CI_DB_query_builder"
	nparams 3
	  param in name "key" explicit_type "string"
	    defaultvalue "NULL"
	  param in name "values" explicit_type "array"
	    defaultvalue "NULL"
	  param in name "escape" explicit_type "bool"
	    defaultvalue "NULL"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

WHERE NOT IN

Generates a WHERE field NOT IN('item', 'item') SQL query,
joined with 'AND' if appropriate.

@param	${t0}	${p0}	The field to search
@param	${t1}	${p1}	The values searched on
@param	${t2}	${p2}
@return	${type}
"
      end

      operation 559490 "or_where_not_in"
	public explicit_return_type "CI_DB_query_builder"
	nparams 3
	  param in name "key" explicit_type "string"
	    defaultvalue "NULL"
	  param in name "values" explicit_type "array"
	    defaultvalue "NULL"
	  param in name "escape" explicit_type "bool"
	    defaultvalue "NULL"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

OR WHERE NOT IN

Generates a WHERE field NOT IN('item', 'item') SQL query,
joined with 'OR' if appropriate.

@param	${t0}	${p0}	The field to search
@param	${t1}	${p1}	The values searched on
@param	${t2}	${p2}
@return	${type}
"
      end

      operation 559618 "_where_in"
	protected explicit_return_type "CI_DB_query_builder"
	nparams 5
	  param in name "key" explicit_type "string"
	    defaultvalue "NULL"
	  param in name "values" explicit_type "array"
	    defaultvalue "NULL"
	  param in name "not" explicit_type "bool"
	    defaultvalue "FALSE"
	  param in name "type" explicit_type "string"
	    defaultvalue "'AND '"
	  param in name "escape" explicit_type "bool"
	    defaultvalue "NULL"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}, ${p3}${v3}, ${p4}${v4}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Internal WHERE IN

@used-by	where_in()
@used-by	or_where_in()
@used-by	where_not_in()
@used-by	or_where_not_in()

@param	${t0}	${p0}	The field to search
@param	${t1}	${p1}	The values searched on
@param	${t2}	${p2}	If the statement would be IN or NOT IN
@param	${t3}	${p3}
@param	${t4}	${p4}
@return	${type}
"
      end

      operation 559746 "like"
	public explicit_return_type "CI_DB_query_builder"
	nparams 4
	  param in name "field" explicit_type "mixed"
	  param in name "match" explicit_type "string"
	    defaultvalue "''"
	  param in name "side" explicit_type "string"
	    defaultvalue "'both'"
	  param in name "escape" explicit_type "bool"
	    defaultvalue "NULL"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}, ${p3}${v3}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

LIKE

Generates a %LIKE% portion of the query.
Separates multiple calls with 'AND'.

@param	${t0}	${p0}
@param	${t1}	${p1}
@param	${t2}	${p2}
@param	${t3}	${p3}
@return	${type}
"
      end

      operation 559874 "not_like"
	public explicit_return_type "CI_DB_query_builder"
	nparams 4
	  param in name "field" explicit_type "mixed"
	  param in name "match" explicit_type "string"
	    defaultvalue "''"
	  param in name "side" explicit_type "string"
	    defaultvalue "'both'"
	  param in name "escape" explicit_type "bool"
	    defaultvalue "NULL"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}, ${p3}${v3}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

NOT LIKE

Generates a NOT LIKE portion of the query.
Separates multiple calls with 'AND'.

@param	${t0}	${p0}
@param	${t1}	${p1}
@param	${t2}	${p2}
@param	${t3}	${p3}
@return	${type}
"
      end

      operation 560002 "or_like"
	public explicit_return_type "CI_DB_query_builder"
	nparams 4
	  param in name "field" explicit_type "mixed"
	  param in name "match" explicit_type "string"
	    defaultvalue "''"
	  param in name "side" explicit_type "string"
	    defaultvalue "'both'"
	  param in name "escape" explicit_type "bool"
	    defaultvalue "NULL"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}, ${p3}${v3}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

OR LIKE

Generates a %LIKE% portion of the query.
Separates multiple calls with 'OR'.

@param	${t0}	${p0}
@param	${t1}	${p1}
@param	${t2}	${p2}
@param	${t3}	${p3}
@return	${type}
"
      end

      operation 560130 "or_not_like"
	public explicit_return_type "CI_DB_query_builder"
	nparams 4
	  param in name "field" explicit_type "mixed"
	  param in name "match" explicit_type "string"
	    defaultvalue "''"
	  param in name "side" explicit_type "string"
	    defaultvalue "'both'"
	  param in name "escape" explicit_type "bool"
	    defaultvalue "NULL"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}, ${p3}${v3}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

OR NOT LIKE

Generates a NOT LIKE portion of the query.
Separates multiple calls with 'OR'.

@param	${t0}	${p0}
@param	${t1}	${p1}
@param	${t2}	${p2}
@param	${t3}	${p3}
@return	${type}
"
      end

      operation 560258 "_like"
	protected explicit_return_type "CI_DB_query_builder"
	nparams 6
	  param in name "field" explicit_type "mixed"
	  param in name "match" explicit_type "string"
	    defaultvalue "''"
	  param in name "type" explicit_type "string"
	    defaultvalue "'AND '"
	  param in name "side" explicit_type "string"
	    defaultvalue "'both'"
	  param in name "not" explicit_type "string"
	    defaultvalue "''"
	  param in name "escape" explicit_type "bool"
	    defaultvalue "NULL"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}, ${p3}${v3}, ${p4}${v4}, ${p5}${v5}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Internal LIKE

@used-by	like()
@used-by	or_like()
@used-by	not_like()
@used-by	or_not_like()

@param	${t0}	${p0}
@param	${t1}	${p1}
@param	${t2}	${p2}
@param	${t3}	${p3}
@param	${t4}	${p4}
@param	${t5}	${p5}
@return	${type}
"
      end

      operation 560386 "group_start"
	public explicit_return_type "CI_DB_query_builder"
	nparams 2
	  param in name "not" explicit_type "string"
	    defaultvalue "''"
	  param in name "type" explicit_type "string"
	    defaultvalue "'AND '"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Starts a query group.

@param	${t0}	${p0}	(Internal use only)
@param	${t1}	${p1}	(Internal use only)
@return	${type}
"
      end

      operation 560514 "or_group_start"
	public explicit_return_type "CI_DB_query_builder"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Starts a query group, but ORs the group

@return	${type}
"
      end

      operation 560642 "not_group_start"
	public explicit_return_type "CI_DB_query_builder"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Starts a query group, but NOTs the group

@return	${type}
"
      end

      operation 560770 "or_not_group_start"
	public explicit_return_type "CI_DB_query_builder"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Starts a query group, but OR NOTs the group

@return	${type}
"
      end

      operation 560898 "group_end"
	public explicit_return_type "CI_DB_query_builder"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Ends a query group

@return	${type}
"
      end

      operation 561026 "_group_get_type"
	protected explicit_return_type "string"
	nparams 1
	  param in name "type" explicit_type "string"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Group_get_type

@used-by	group_start()
@used-by	_like()
@used-by	_wh()
@used-by	_where_in()

@param	${t0}	${p0}
@return	${type}
"
      end

      operation 561154 "group_by"
	public explicit_return_type "CI_DB_query_builder"
	nparams 2
	  param in name "by" explicit_type "string"
	  param in name "escape" explicit_type "bool"
	    defaultvalue "NULL"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

GROUP BY

@param	${t0}	${p0}
@param	${t1}	${p1}
@return	${type}
"
      end

      operation 561282 "having"
	public explicit_return_type "CI_DB_query_builder"
	nparams 3
	  param in name "key" explicit_type "string"
	  param in name "value" explicit_type "string"
	    defaultvalue "NULL"
	  param in name "escape" explicit_type "bool"
	    defaultvalue "NULL"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

HAVING

Separates multiple calls with 'AND'.

@param	${t0}	${p0}
@param	${t1}	${p1}
@param	${t2}	${p2}
@return	${type}
"
      end

      operation 561410 "or_having"
	public explicit_return_type "CI_DB_query_builder"
	nparams 3
	  param in name "key" explicit_type "string"
	  param in name "value" explicit_type "string"
	    defaultvalue "NULL"
	  param in name "escape" explicit_type "bool"
	    defaultvalue "NULL"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

OR HAVING

Separates multiple calls with 'OR'.

@param	${t0}	${p0}
@param	${t1}	${p1}
@param	${t2}	${p2}
@return	${type}
"
      end

      operation 561538 "order_by"
	public explicit_return_type "CI_DB_query_builder"
	nparams 3
	  param in name "orderby" explicit_type "string"
	  param in name "direction" explicit_type "string"
	    defaultvalue "''"
	  param in name "escape" explicit_type "bool"
	    defaultvalue "NULL"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

ORDER BY

@param	${t0}	${p0}
@param	${t1}	${p1}	ASC, DESC or RANDOM
@param	${t2}	${p2}
@return	${type}
"
      end

      operation 561666 "limit"
	public explicit_return_type "CI_DB_query_builder"
	nparams 2
	  param in name "value" explicit_type "int"
	  param in name "offset" explicit_type "int"
	    defaultvalue "0"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

LIMIT

@param	${t0}	${p0}	LIMIT value
@param	${t1}	${p1}	OFFSET value
@return	${type}
"
      end

      operation 561794 "offset"
	public explicit_return_type "CI_DB_query_builder"
	nparams 1
	  param in name "offset" explicit_type "int"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Sets the OFFSET value

@param	${t0}	${p0}	OFFSET value
@return	${type}
"
      end

      operation 561922 "_limit"
	protected explicit_return_type "string"
	nparams 1
	  param in name "sql" explicit_type "string"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

LIMIT string

Generates a platform-specific LIMIT clause.

@param	${t0}	${p0}	SQL Query
@return	${type}
"
      end

      operation 562050 "set"
	public explicit_return_type "CI_DB_query_builder"
	nparams 3
	  param in name "key" explicit_type "mixed"
	  param in name "value" explicit_type "string"
	    defaultvalue "''"
	  param in name "escape" explicit_type "bool"
	    defaultvalue "NULL"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

The \"set\" function.

Allows key/value pairs to be set for inserting or updating

@param	${t0}
@param	${t1}
@param	${t2}
@return	${type}
"
      end

      operation 562178 "get_compiled_select"
	public explicit_return_type "string"
	nparams 2
	  param in name "table" explicit_type "string"
	    defaultvalue "''"
	  param in name "reset" explicit_type "bool"
	    defaultvalue "TRUE"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Get SELECT query string

Compiles a SELECT query string and returns the sql.

@param	${t0}	the table name to select from (optional)
@param	${t1}	TRUE: resets QB values; FALSE: leave QB values alone
@return	${type}
"
      end

      operation 562306 "get"
	public explicit_return_type "CI_DB_result"
	nparams 3
	  param in name "table" explicit_type "string"
	    defaultvalue "''"
	  param in name "limit" explicit_type "string"
	    defaultvalue "NULL"
	  param in name "offset" explicit_type "string"
	    defaultvalue "NULL"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Get

Compiles the select statement based on the other functions called
and runs the query

@param	${t0}	the table
@param	${t1}	the limit clause
@param	${t2}	the offset clause
@return	${type}
"
      end

      operation 562434 "count_all_results"
	public explicit_return_type "int"
	nparams 2
	  param in name "table" explicit_type "string"
	    defaultvalue "''"
	  param in name "reset" explicit_type "bool"
	    defaultvalue "TRUE"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

\"Count All Results\" query

Generates a platform-specific query string that counts all records
returned by an Query Builder query.

@param	${t0}
@param	${t1}	the reset clause
@return	${type}
"
      end

      operation 562562 "get_where"
	public explicit_return_type "CI_DB_result"
	nparams 4
	  param in name "table" explicit_type "string"
	    defaultvalue "''"
	  param in name "where" explicit_type "string"
	    defaultvalue "NULL"
	  param in name "limit" explicit_type "int"
	    defaultvalue "NULL"
	  param in name "offset" explicit_type "int"
	    defaultvalue "NULL"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}, ${p3}${v3}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Get_Where

Allows the where clause, limit and offset to be added directly

@param	${t0}	${p0}
@param	${t1}	${p1}
@param	${t2}	${p2}
@param	${t3}	${p3}
@return	${type}
"
      end

      operation 562690 "insert_batch"
	public explicit_return_type "int"
	nparams 4
	  param in name "table" explicit_type "string"
	  param in name "set" explicit_type "array"
	    defaultvalue "NULL"
	  param in name "escape" explicit_type "bool"
	    defaultvalue "NULL"
	  param in name "batch_size" explicit_type ""
	    defaultvalue "100"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}, ${p3}${v3}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Insert_Batch

Compiles batch insert strings and runs the queries

@param	${t0}	${p0}	Table to insert into
@param	${t1}	${p1} 	An associative array of insert values
@param	${t2}	${p2}	Whether to escape values and identifiers
@return	${type}	Number of rows inserted or FALSE on failure
"
      end

      operation 562818 "_insert_batch"
	protected explicit_return_type "string"
	nparams 3
	  param in name "table" explicit_type "string"
	  param in name "keys" explicit_type "array"
	  param in name "values" explicit_type "array"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Insert batch statement

Generates a platform-specific insert string from the supplied data.

@param	${t0}	${p0}	Table name
@param	${t1}	${p1}	INSERT keys
@param	${t2}	${p2}	INSERT values
@return	${type}
"
      end

      operation 562946 "set_insert_batch"
	public explicit_return_type "CI_DB_query_builder"
	nparams 3
	  param in name "key" explicit_type "mixed"
	  param in name "value" explicit_type "string"
	    defaultvalue "''"
	  param in name "escape" explicit_type "bool"
	    defaultvalue "NULL"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

The \"set_insert_batch\" function.  Allows key/value pairs to be set for batch inserts

@param	${t0}
@param	${t1}
@param	${t2}
@return	${type}
"
      end

      operation 563074 "get_compiled_insert"
	public explicit_return_type "string"
	nparams 2
	  param in name "table" explicit_type "string"
	    defaultvalue "''"
	  param in name "reset" explicit_type "bool"
	    defaultvalue "TRUE"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Get INSERT query string

Compiles an insert query and returns the sql

@param	${t0}	the table to insert into
@param	${t1}	TRUE: reset QB values; FALSE: leave QB values alone
@return	${type}
"
      end

      operation 563202 "insert"
	public explicit_return_type "bool"
	nparams 3
	  param in name "table" explicit_type "string"
	    defaultvalue "''"
	  param in name "set" explicit_type "array"
	    defaultvalue "NULL"
	  param in name "escape" explicit_type "bool"
	    defaultvalue "NULL"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Insert

Compiles an insert string and runs the query

@param	${t0}	the table to insert data into
@param	${t1}	an associative array of insert values
@param	${t2}	${p2}	Whether to escape values and identifiers
@return	${type}	TRUE on success, FALSE on failure
"
      end

      operation 563330 "_validate_insert"
	protected explicit_return_type "string"
	nparams 1
	  param in name "table" explicit_type "string"
	    defaultvalue "''"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Validate Insert

This method is used by both insert() and get_compiled_insert() to
validate that the there data is actually being set and that table
has been chosen to be inserted into.

@param	${t0}	the table to insert data into
@return	${type}
"
      end

      operation 563458 "replace"
	public explicit_return_type "bool"
	nparams 2
	  param in name "table" explicit_type "string"
	    defaultvalue "''"
	  param in name "set" explicit_type "array"
	    defaultvalue "NULL"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Replace

Compiles an replace into string and runs the query

@param	${t0}	the table to replace data into
@param	${t1}	an associative array of insert values
@return	${type}	TRUE on success, FALSE on failure
"
      end

      operation 563586 "_replace"
	protected explicit_return_type "string"
	nparams 3
	  param in name "table" explicit_type "string"
	  param in name "keys" explicit_type "array"
	  param in name "values" explicit_type "array"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Replace statement

Generates a platform-specific replace string from the supplied data

@param	${t0}	the table name
@param	${t1}	the insert keys
@param	${t2}	the insert values
@return	${type}
"
      end

      operation 563714 "_from_tables"
	protected explicit_return_type "string"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

FROM tables

Groups tables in FROM clauses if needed, so there is no confusion
about operator precedence.

Note: This is only used (and overridden) by MySQL and CUBRID.

@return	${type}
"
      end

      operation 563842 "get_compiled_update"
	public explicit_return_type "string"
	nparams 2
	  param in name "table" explicit_type "string"
	    defaultvalue "''"
	  param in name "reset" explicit_type "bool"
	    defaultvalue "TRUE"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Get UPDATE query string

Compiles an update query and returns the sql

@param	${t0}	the table to update
@param	${t1}	TRUE: reset QB values; FALSE: leave QB values alone
@return	${type}
"
      end

      operation 563970 "update"
	public explicit_return_type "bool"
	nparams 4
	  param in name "table" explicit_type "string"
	    defaultvalue "''"
	  param in name "set" explicit_type "array"
	    defaultvalue "NULL"
	  param in name "where" explicit_type "mixed"
	    defaultvalue "NULL"
	  param in name "limit" explicit_type "int"
	    defaultvalue "NULL"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}, ${p3}${v3}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

UPDATE

Compiles an update string and runs the query.

@param	${t0}	${p0}
@param	${t1}	${p1}	An associative array of update values
@param	${t2}	${p2}
@param	${t3}	${p3}
@return	${type}	TRUE on success, FALSE on failure
"
      end

      operation 564098 "_validate_update"
	protected explicit_return_type "bool"
	nparams 1
	  param in name "table" explicit_type "string"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Validate Update

This method is used by both update() and get_compiled_update() to
validate that data is actually being set and that a table has been
chosen to be update.

@param	${t0}	the table to update data on
@return	${type}
"
      end

      operation 564226 "update_batch"
	public explicit_return_type "int"
	nparams 4
	  param in name "table" explicit_type "string"
	  param in name "set" explicit_type "array"
	    defaultvalue "NULL"
	  param in name "index" explicit_type "string"
	    defaultvalue "NULL"
	  param in name "batch_size" explicit_type ""
	    defaultvalue "100"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}, ${p3}${v3}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Update_Batch

Compiles an update string and runs the query

@param	${t0}	the table to retrieve the results from
@param	${t1}	an associative array of update values
@param	${t2}	the where key
@return	${type}	number of rows affected or FALSE on failure
"
      end

      operation 564354 "_update_batch"
	protected explicit_return_type "string"
	nparams 3
	  param in name "table" explicit_type "string"
	  param in name "values" explicit_type "array"
	  param in name "index" explicit_type "string"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Update_Batch statement

Generates a platform-specific batch update string from the supplied data

@param	${t0}	${p0}	Table name
@param	${t1}	${p1}	Update data
@param	${t2}	${p2}	WHERE key
@return	${type}
"
      end

      operation 564482 "set_update_batch"
	public explicit_return_type "CI_DB_query_builder"
	nparams 3
	  param in name "key" explicit_type "array"
	  param in name "index" explicit_type "string"
	    defaultvalue "''"
	  param in name "escape" explicit_type "bool"
	    defaultvalue "NULL"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

The \"set_update_batch\" function.  Allows key/value pairs to be set for batch updating

@param	${t0}
@param	${t1}
@param	${t2}
@return	${type}
"
      end

      operation 564610 "empty_table"
	public explicit_return_type "bool"
	nparams 1
	  param in name "table" explicit_type "string"
	    defaultvalue "''"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Empty Table

Compiles a delete string and runs \"DELETE FROM table\"

@param	${t0}	the table to empty
@return	${type}	TRUE on success, FALSE on failure
"
      end

      operation 564738 "truncate"
	public explicit_return_type "bool"
	nparams 1
	  param in name "table" explicit_type "string"
	    defaultvalue "''"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Truncate

Compiles a truncate string and runs the query
If the database does not support the truncate() command
This function maps to \"DELETE FROM table\"

@param	${t0}	the table to truncate
@return	${type}	TRUE on success, FALSE on failure
"
      end

      operation 564866 "_truncate"
	protected explicit_return_type "string"
	nparams 1
	  param in name "table" explicit_type "string"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Truncate statement

Generates a platform-specific truncate string from the supplied data

If the database does not support the truncate() command,
then this method maps to 'DELETE FROM table'

@param	${t0}	the table name
@return	${type}
"
      end

      operation 564994 "get_compiled_delete"
	public explicit_return_type "string"
	nparams 2
	  param in name "table" explicit_type "string"
	    defaultvalue "''"
	  param in name "reset" explicit_type "bool"
	    defaultvalue "TRUE"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Get DELETE query string

Compiles a delete query string and returns the sql

@param	${t0}	the table to delete from
@param	${t1}	TRUE: reset QB values; FALSE: leave QB values alone
@return	${type}
"
      end

      operation 565122 "delete"
	public explicit_return_type "mixed"
	nparams 4
	  param in name "table" explicit_type "mixed"
	    defaultvalue "''"
	  param in name "where" explicit_type "mixed"
	    defaultvalue "''"
	  param in name "limit" explicit_type "mixed"
	    defaultvalue "NULL"
	  param in name "reset_data" explicit_type "bool"
	    defaultvalue "TRUE"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}, ${p1}${v1}, ${p2}${v2}, ${p3}${v3}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Delete

Compiles a delete string and runs the query

@param	${t0}	the table(s) to delete from. String or array
@param	${t1}	the where clause
@param	${t2}	the limit clause
@param	${t3}
@return	${type}
"
      end

      operation 565250 "_delete"
	protected explicit_return_type "string"
	nparams 1
	  param in name "table" explicit_type "string"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Delete statement

Generates a platform-specific delete string from the supplied data

@param	${t0}	the table name
@return	${type}
"
      end

      operation 565378 "dbprefix"
	public explicit_return_type "string"
	nparams 1
	  param in name "table" explicit_type "string"
	    defaultvalue "''"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

DB Prefix

Prepends a database prefix if one exists in configuration

@param	${t0}	the table
@return	${type}
"
      end

      operation 565506 "set_dbprefix"
	public explicit_return_type "string"
	nparams 1
	  param in name "prefix" explicit_type "string"
	    defaultvalue "''"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Set DB Prefix

Set's the DB Prefix to something new without needing to reconnect

@param	${t0}	the prefix
@return	${type}
"
      end

      operation 565634 "_track_aliases"
	protected explicit_return_type "string"
	nparams 1
	  param in name "table" explicit_type "string"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Track Aliases

Used to track SQL statements written with aliased tables.

@param	${t0}	The table to inspect
@return	${type}
"
      end

      operation 565762 "_compile_select"
	protected explicit_return_type "string"
	nparams 1
	  param in name "select_override" explicit_type "bool"
	    defaultvalue "FALSE"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Compile the SELECT statement

Generates a query string based on which functions were used.
Should not be called directly.

@param	${t0}	${p0}
@return	${type}
"
      end

      operation 565890 "_compile_wh"
	protected explicit_return_type "string"
	nparams 1
	  param in name "qb_key" explicit_type "string"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Compile WHERE, HAVING statements

Escapes identifiers in WHERE and HAVING statements at execution time.

Required so that aliases are tracked properly, regardless of whether
where(), or_where(), having(), or_having are called prior to from(),
join() and dbprefix is added only if needed.

@param	${t0}	${p0}	'qb_where' or 'qb_having'
@return	${type}	SQL statement
"
      end

      operation 566018 "_compile_group_by"
	protected explicit_return_type "string"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Compile GROUP BY

Escapes identifiers in GROUP BY statements at execution time.

Required so that aliases are tracked properly, regardless of whether
group_by() is called prior to from(), join() and dbprefix is added
only if needed.

@return	${type}	SQL statement
"
      end

      operation 566146 "_compile_order_by"
	protected explicit_return_type "string"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Compile ORDER BY

Escapes identifiers in ORDER BY statements at execution time.

Required so that aliases are tracked properly, regardless of whether
order_by() is called prior to from(), join() and dbprefix is added
only if needed.

@return	${type}	SQL statement
"
      end

      operation 566274 "_object_to_array"
	protected explicit_return_type "array"
	nparams 1
	  param in name "object" explicit_type "object"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Object to Array

Takes an object as input and converts the class variables to array key/vals

@param	${t0}
@return	${type}
"
      end

      operation 566402 "_object_to_array_batch"
	protected explicit_return_type "array"
	nparams 1
	  param in name "object" explicit_type "object"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Object to Array

Takes an object as input and converts the class variables to array key/vals

@param	${t0}
@return	${type}
"
      end

      operation 566530 "start_cache"
	public explicit_return_type "CI_DB_query_builder"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Start Cache

Starts QB caching

@return	${type}
"
      end

      operation 566658 "stop_cache"
	public explicit_return_type "CI_DB_query_builder"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Stop Cache

Stops QB caching

@return	${type}
"
      end

      operation 566786 "flush_cache"
	public explicit_return_type "CI_DB_query_builder"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Flush Cache

Empties the QB cache

@return	${type}
"
      end

      operation 566914 "_merge_cache"
	protected explicit_return_type "void"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Merge Cache

When called, this function merges any cached QB arrays with
locally called ones.

@return	${type}
"
      end

      operation 567042 "_is_literal"
	protected explicit_return_type "bool"
	nparams 1
	  param in name "str" explicit_type "string"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Is literal

Determines if a string represents a literal value or a field name

@param	${t0}	${p0}
@return	${type}
"
      end

      operation 567170 "reset_query"
	public explicit_return_type "CI_DB_query_builder"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Reset Query Builder values.

Publicly-visible method to reset the QB values.

@return	${type}
"
      end

      operation 567298 "_reset_run"
	protected explicit_return_type "void"
	nparams 1
	  param in name "qb_reset_items" explicit_type "array"
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${p0}${v0}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Resets the query builder values.  Called by the get() function

@param	${t0}	An array of fields to reset
@return	${type}
"
      end

      operation 567426 "_reset_select"
	protected explicit_return_type "void"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Resets the query builder values.  Called by the get() function

@return	${type}
"
      end

      operation 567554 "_reset_write"
	protected explicit_return_type "void"
	nparams 0
	
	
	preserve_php_body_indent php_def "  ${comment}${final}${visibility}${abstract}${static}function ${name}${(}${)}${type}
{
  ${body}}
"
	
	
	comment " --------------------------------------------------------------------

Resets the query builder \"write\" values.

Called by the insert() update() insert_batch() update_batch() and delete() functions

@return	${type}
"
      end
    end
  end

  package_ref 145794 // drivers

  deploymentview 145922 "database"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 201858 "DB"
      stereotype "source"
      php_src "<?php
/**
 * CodeIgniter
 *
 * An open source application development framework for PHP
 *
 * This content is released under the MIT License (MIT)
 *
 * Copyright (c) 2014 - 2017, British Columbia Institute of Technology
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the \"Software\"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * @package	CodeIgniter
 * @author	EllisLab Dev Team
 * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)
 * @copyright	Copyright (c) 2014 - 2017, British Columbia Institute of Technology (http://bcit.ca/)
 * @license	http://opensource.org/licenses/MIT	MIT License
 * @link	https://codeigniter.com
 * @since	Version 1.0.0
 * @filesource
 */
defined('BASEPATH') OR exit('No direct script access allowed');

/**
 * Initialize the database
 *
 * @category	Database
 * @author	EllisLab Dev Team
 * @link	https://codeigniter.com/user_guide/database/
 *
 * @param 	string|string[]	$params
 * @param 	bool		$query_builder_override
 *				Determines if query builder should be used or not
 */
function &DB($params = '', $query_builder_override = NULL)
{
	// Load the DB config file if a DSN string wasn't passed
	if (is_string($params) && strpos($params, '://') === FALSE)
	{
		// Is the config file in the environment folder?
		if ( ! file_exists($file_path = APPPATH.'config/'.ENVIRONMENT.'/database.php')
			&& ! file_exists($file_path = APPPATH.'config/database.php'))
		{
			show_error('The configuration file database.php does not exist.');
		}

		include($file_path);

		// Make packages contain database config files,
		// given that the controller instance already exists
		if (class_exists('CI_Controller', FALSE))
		{
			foreach (get_instance()->load->get_package_paths() as $path)
			{
				if ($path !== APPPATH)
				{
					if (file_exists($file_path = $path.'config/'.ENVIRONMENT.'/database.php'))
					{
						include($file_path);
					}
					elseif (file_exists($file_path = $path.'config/database.php'))
					{
						include($file_path);
					}
				}
			}
		}

		if ( ! isset($db) OR count($db) === 0)
		{
			show_error('No database connection settings were found in the database config file.');
		}

		if ($params !== '')
		{
			$active_group = $params;
		}

		if ( ! isset($active_group))
		{
			show_error('You have not specified a database connection group via $active_group in your config/database.php file.');
		}
		elseif ( ! isset($db[$active_group]))
		{
			show_error('You have specified an invalid database connection group ('.$active_group.') in your config/database.php file.');
		}

		$params = $db[$active_group];
	}
	elseif (is_string($params))
	{
		/**
		 * Parse the URL from the DSN string
		 * Database settings can be passed as discreet
		 * parameters or as a data source name in the first
		 * parameter. DSNs must have this prototype:
		 * $dsn = 'driver://username:password@hostname/database';
		 */
		if (($dsn = @parse_url($params)) === FALSE)
		{
			show_error('Invalid DB Connection String');
		}

		$params = array(
			'dbdriver'	=> $dsn['scheme'],
			'hostname'	=> isset($dsn['host']) ? rawurldecode($dsn['host']) : '',
			'port'		=> isset($dsn['port']) ? rawurldecode($dsn['port']) : '',
			'username'	=> isset($dsn['user']) ? rawurldecode($dsn['user']) : '',
			'password'	=> isset($dsn['pass']) ? rawurldecode($dsn['pass']) : '',
			'database'	=> isset($dsn['path']) ? rawurldecode(substr($dsn['path'], 1)) : ''
		);

		// Were additional config items set?
		if (isset($dsn['query']))
		{
			parse_str($dsn['query'], $extra);

			foreach ($extra as $key => $val)
			{
				if (is_string($val) && in_array(strtoupper($val), array('TRUE', 'FALSE', 'NULL')))
				{
					$val = var_export($val, TRUE);
				}

				$params[$key] = $val;
			}
		}
	}

	// No DB specified yet? Beat them senseless...
	if (empty($params['dbdriver']))
	{
		show_error('You have not selected a database type to connect to.');
	}

	// Load the DB classes. Note: Since the query builder class is optional
	// we need to dynamically create a class that extends proper parent class
	// based on whether we're using the query builder class or not.
	if ($query_builder_override !== NULL)
	{
		$query_builder = $query_builder_override;
	}
	// Backwards compatibility work-around for keeping the
	// $active_record config variable working. Should be
	// removed in v3.1
	elseif ( ! isset($query_builder) && isset($active_record))
	{
		$query_builder = $active_record;
	}

	require_once(BASEPATH.'database/DB_driver.php');

	if ( ! isset($query_builder) OR $query_builder === TRUE)
	{
		require_once(BASEPATH.'database/DB_query_builder.php');
		if ( ! class_exists('CI_DB', FALSE))
		{
			/**
			 * CI_DB
			 *
			 * Acts as an alias for both CI_DB_driver and CI_DB_query_builder.
			 *
			 * @see	CI_DB_query_builder
			 * @see	CI_DB_driver
			 */
			class CI_DB extends CI_DB_query_builder { }
		}
	}
	elseif ( ! class_exists('CI_DB', FALSE))
	{
		/**
	 	 * @ignore
		 */
		class CI_DB extends CI_DB_driver { }
	}

	// Load the DB driver
	$driver_file = BASEPATH.'database/drivers/'.$params['dbdriver'].'/'.$params['dbdriver'].'_driver.php';

	file_exists($driver_file) OR show_error('Invalid DB driver');
	require_once($driver_file);

	// Instantiate the DB adapter
	$driver = 'CI_DB_'.$params['dbdriver'].'_driver';
	$DB = new $driver($params);

	// Check for a subdriver
	if ( ! empty($DB->subdriver))
	{
		$driver_file = BASEPATH.'database/drivers/'.$DB->dbdriver.'/subdrivers/'.$DB->dbdriver.'_'.$DB->subdriver.'_driver.php';

		if (file_exists($driver_file))
		{
			require_once($driver_file);
			$driver = 'CI_DB_'.$DB->dbdriver.'_'.$DB->subdriver.'_driver';
			$DB = new $driver($params);
		}
	}

	$DB->initialize();
	return $DB;
}
"
      associated_elems
      end
    end

    artifact 201986 "DB_cache"
      stereotype "source"
      php_src "<?php
/**
 * CodeIgniter
 *
 * An open source application development framework for PHP
 *
 * This content is released under the MIT License (MIT)
 *
 * Copyright (c) 2014 - 2017, British Columbia Institute of Technology
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the \"Software\"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * @package	CodeIgniter
 * @author	EllisLab Dev Team
 * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)
 * @copyright	Copyright (c) 2014 - 2017, British Columbia Institute of Technology (http://bcit.ca/)
 * @license	http://opensource.org/licenses/MIT	MIT License
 * @link	https://codeigniter.com
 * @since	Version 1.0.0
 * @filesource
 */
defined('BASEPATH') OR exit('No direct script access allowed');

${definition}

"
      associated_elems
	class_ref 176002 // CI_DB_Cache
      end
    end

    artifact 202114 "DB_driver"
      stereotype "source"
      php_src "<?php
/**
 * CodeIgniter
 *
 * An open source application development framework for PHP
 *
 * This content is released under the MIT License (MIT)
 *
 * Copyright (c) 2014 - 2017, British Columbia Institute of Technology
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the \"Software\"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * @package	CodeIgniter
 * @author	EllisLab Dev Team
 * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)
 * @copyright	Copyright (c) 2014 - 2017, British Columbia Institute of Technology (http://bcit.ca/)
 * @license	http://opensource.org/licenses/MIT	MIT License
 * @link	https://codeigniter.com
 * @since	Version 1.0.0
 * @filesource
 */
defined('BASEPATH') OR exit('No direct script access allowed');

${definition}

"
      associated_elems
	class_ref 161410 // CI_DB_driver
      end
    end

    artifact 202242 "DB_forge"
      stereotype "source"
      php_src "<?php
/**
 * CodeIgniter
 *
 * An open source application development framework for PHP
 *
 * This content is released under the MIT License (MIT)
 *
 * Copyright (c) 2014 - 2017, British Columbia Institute of Technology
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the \"Software\"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * @package	CodeIgniter
 * @author	EllisLab Dev Team
 * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)
 * @copyright	Copyright (c) 2014 - 2017, British Columbia Institute of Technology (http://bcit.ca/)
 * @license	http://opensource.org/licenses/MIT	MIT License
 * @link	https://codeigniter.com
 * @since	Version 1.0.0
 * @filesource
 */
defined('BASEPATH') OR exit('No direct script access allowed');

${definition}

"
      associated_elems
	class_ref 158082 // CI_DB_forge
      end
    end

    artifact 202370 "DB_query_builder"
      stereotype "source"
      php_src "<?php
/**
 * CodeIgniter
 *
 * An open source application development framework for PHP
 *
 * This content is released under the MIT License (MIT)
 *
 * Copyright (c) 2014 - 2017, British Columbia Institute of Technology
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the \"Software\"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * @package	CodeIgniter
 * @author	EllisLab Dev Team
 * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)
 * @copyright	Copyright (c) 2014 - 2017, British Columbia Institute of Technology (http://bcit.ca/)
 * @license	http://opensource.org/licenses/MIT	MIT License
 * @link	https://codeigniter.com
 * @since	Version 1.0.0
 * @filesource
 */
defined('BASEPATH') OR exit('No direct script access allowed');

${definition}

"
      associated_elems
	class_ref 176130 // CI_DB_query_builder
      end
    end

    artifact 202498 "DB_result"
      stereotype "source"
      php_src "<?php
/**
 * CodeIgniter
 *
 * An open source application development framework for PHP
 *
 * This content is released under the MIT License (MIT)
 *
 * Copyright (c) 2014 - 2017, British Columbia Institute of Technology
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the \"Software\"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * @package	CodeIgniter
 * @author	EllisLab Dev Team
 * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)
 * @copyright	Copyright (c) 2014 - 2017, British Columbia Institute of Technology (http://bcit.ca/)
 * @license	http://opensource.org/licenses/MIT	MIT License
 * @link	https://codeigniter.com
 * @since	Version 1.0.0
 * @filesource
 */
defined('BASEPATH') OR exit('No direct script access allowed');

${definition}

"
      associated_elems
	class_ref 158338 // CI_DB_result
      end
    end

    artifact 202626 "DB_utility"
      stereotype "source"
      php_src "<?php
/**
 * CodeIgniter
 *
 * An open source application development framework for PHP
 *
 * This content is released under the MIT License (MIT)
 *
 * Copyright (c) 2014 - 2017, British Columbia Institute of Technology
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the \"Software\"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * @package	CodeIgniter
 * @author	EllisLab Dev Team
 * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)
 * @copyright	Copyright (c) 2014 - 2017, British Columbia Institute of Technology (http://bcit.ca/)
 * @license	http://opensource.org/licenses/MIT	MIT License
 * @link	https://codeigniter.com
 * @since	Version 1.0.0
 * @filesource
 */
defined('BASEPATH') OR exit('No direct script access allowed');

${definition}

"
      associated_elems
	class_ref 158594 // CI_DB_utility
      end
    end
  end
end
