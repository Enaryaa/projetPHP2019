class CI_DB_pdo_driver
!!!599682.php!!!	__construct(in params : array) : void
		parent::__construct($params);

		if (preg_match('/([^:]+):/', $this->dsn, $match) && count($match) === 2)
		{
			// If there is a minimum valid dsn string pattern found, we're done
			// This is for general PDO users, who tend to have a full DSN string.
			$this->subdriver = $match[1];
			return;
		}
		// Legacy support for DSN specified in the hostname field
		elseif (preg_match('/([^:]+):/', $this->hostname, $match) && count($match) === 2)
		{
			$this->dsn = $this->hostname;
			$this->hostname = NULL;
			$this->subdriver = $match[1];
			return;
		}
		elseif (in_array($this->subdriver, array('mssql', 'sybase'), TRUE))
		{
			$this->subdriver = 'dblib';
		}
		elseif ($this->subdriver === '4D')
		{
			$this->subdriver = '4d';
		}
		elseif ( ! in_array($this->subdriver, array('4d', 'cubrid', 'dblib', 'firebird', 'ibm', 'informix', 'mysql', 'oci', 'odbc', 'pgsql', 'sqlite', 'sqlsrv'), TRUE))
		{
			log_message('error', 'PDO: Invalid or non-existent subdriver');

			if ($this->db_debug)
			{
				show_error('Invalid or non-existent PDO subdriver');
			}
		}

		$this->dsn = NULL;
!!!599810.php!!!	db_connect(in persistent : bool = FALSE) : object
		if ($persistent === TRUE)
		{
			$this->options[PDO::ATTR_PERSISTENT] = TRUE;
		}

		try
		{
			return new PDO($this->dsn, $this->username, $this->password, $this->options);
		}
		catch (PDOException $e)
		{
			if ($this->db_debug && empty($this->failover))
			{
				$this->display_error($e->getMessage(), '', TRUE);
			}

			return FALSE;
		}
!!!599938.php!!!	version() : string
		if (isset($this->data_cache['version']))
		{
			return $this->data_cache['version'];
		}

		// Not all subdrivers support the getAttribute() method
		try
		{
			return $this->data_cache['version'] = $this->conn_id->getAttribute(PDO::ATTR_SERVER_VERSION);
		}
		catch (PDOException $e)
		{
			return parent::version();
		}
!!!600066.php!!!	_execute(in sql : string) : mixed
		return $this->conn_id->query($sql);
!!!600194.php!!!	_trans_begin() : bool
		return $this->conn_id->beginTransaction();
!!!600322.php!!!	_trans_commit() : bool
		return $this->conn_id->commit();
!!!600450.php!!!	_trans_rollback() : bool
		return $this->conn_id->rollBack();
!!!600578.php!!!	_escape_str(in str : string) : string
		// Escape the string
		$str = $this->conn_id->quote($str);

		// If there are duplicated quotes, trim them away
		return ($str[0] === "'")
			? substr($str, 1, -1)
			: $str;
!!!600706.php!!!	affected_rows() : int
		return is_object($this->result_id) ? $this->result_id->rowCount() : 0;
!!!600834.php!!!	insert_id(in name : string = NULL) : int
		return $this->conn_id->lastInsertId($name);
!!!600962.php!!!	_field_data(in table : string) : string
		return 'SELECT TOP 1 * FROM '.$this->protect_identifiers($table);
!!!601090.php!!!	error() : array
		$error = array('code' => '00000', 'message' => '');
		$pdo_error = $this->conn_id->errorInfo();

		if (empty($pdo_error[0]))
		{
			return $error;
		}

		$error['code'] = isset($pdo_error[1]) ? $pdo_error[0].'/'.$pdo_error[1] : $pdo_error[0];
		if (isset($pdo_error[2]))
		{
			 $error['message'] = $pdo_error[2];
		}

		return $error;
!!!601218.php!!!	_truncate(in table : string) : string
		return 'TRUNCATE TABLE '.$table;
